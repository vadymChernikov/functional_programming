(load "ltk/ltk.lisp")
(in-package :ltk)
(load "cars")

(defun gui() 
	(with-ltk()
		(setq sld (make-instance 'Park))
		(let* (
				(frame1 (make-instance 'frame))
				(frame2 (make-instance 'frame))
	            (text-label-Porche   (make-instance 'label :master frame1 :text "0"))
	            (text-label-Mercedes    (make-instance 'label :master frame1 :text "0"))
	            (text-label-Lada   (make-instance 'label :master frame1 :text "0"))
	            (text-label-Renault (make-instance 'label :master frame1 :text "0"))
	            (text-label-price (make-instance 'label :master frame1 :text "0"))
	            (text-label-sorted   (make-instance 'label :master frame2 :text "<< Sorted Park >>"))
	            (text-label-bounds   (make-instance 'label :master frame2 :text "<< Length bounds >>"))
	            (text-field-low      (make-instance 'entry :master frame2 :text "10"))
	            (text-field-high     (make-instance 'entry :master frame2 :text "50"))

	            (btn-Porche (make-instance 'button :master frame1 :text "Porche"
                            	:command (lambda() 
                            			 	(add-car sld (make-instance 'Porche :fname "Porche" :fspeed 800 :fprice 8 :ffuel_consumption 2))
                            			 	(setf (text text-label-Porche) (write-to-string (+ 1 (parse-integer (text text-label-Porche)))))
                                         )
                            )
	            )
	            (btn-Mercedes (make-instance 'button :master frame1 :text "Mercedes"
                            	:command (lambda() 
                            			 	(add-car sld (make-instance 'Mercedes :fname "Mercedes" :fspeed 200 :fprice 10 :ffuel_consumption 3))
                            			 	(setf (text text-label-Mercedes) (write-to-string (+ 1 (parse-integer (text text-label-Mercedes)))))
                                         )
                            )
	            )
	            (btn-Lada (make-instance 'button :master frame1 :text "Lada"
                            	:command (lambda() 
                            			 	(add-car sld (make-instance 'Lada :fname "Lada" :fspeed 123 :fprice 15 :ffuel_consumption 3))
                            			 	(setf (text text-label-Lada) (write-to-string (+ 1 (parse-integer (text text-label-Lada)))))
                                         )
                            )
	            )
	            (btn-Renault (make-instance 'button :master frame1 :text "Renault"
                            	:command (lambda() 
                            			 	(add-car sld (make-instance 'Renault :fname "Renault" :fspeed 90 :fprice 12 :ffuel_consumption 1))
                            			 	(setf (text text-label-Renault) (write-to-string (+ 1 (parse-integer (text text-label-Renault)))))
                                         )
                            )
	            )
	            (btn-uncook (make-instance 'button :master frame2 :text "Reset"
                            	:command (lambda()
                            				(setq sld (make-instance 'Park))

                            			 	(setf (text text-label-Porche) "0")
                            			 	(setf (text text-label-Mercedes) "0")
                            			 	(setf (text text-label-Lada) "0")
                            			 	(setf (text text-label-Renault) "0")
                            			 	(setf (text text-label-price) "Total price")
                            			 	(setf (text text-label-sorted) "<< Sorted Park >>")
                            			 	(setf (text text-label-bounds) "<< Length bounds >>")
                                         )
                            )
	            )
	            (btn-price (make-instance 'button :master frame1 :text "Total price"
                            	:command (lambda()
                            				(setf (text text-label-price) (write-to-string (get-total-price sld)))
                                         )
                            )
	            )
	            (btn-sorted (make-instance 'button :master frame2 :text "Sort!"
	            				:command (lambda()
	            							(setf (text text-label-sorted) (sort (car-lst sld) #'< :key #'fl-fuel_consumption))
	            						 )
	            			)
	            )
	            (btn-bounds (make-instance 'button :master frame2 :text "Bounds!"
	            				:command (lambda()
	            							(setf (text text-label-bounds) (car-with-speed sld (read-from-string (text text-field-low)) (read-from-string (text text-field-high))))
	            						 )
	            			)
	            )
            )
			(pack frame1 :padx 15 :pady 75 :side :left)
			(pack frame2 :padx 15 :pady 75 :side :left)
			(configure frame2 :width 3000)
	        (grid text-label-Porche  0 1 :padx 20 :pady :3)
	        (grid text-label-Mercedes 1 1 :padx 20 :pady :3)
	        (grid text-label-Lada 2 1 :padx 20 :pady :3)
	        (grid text-label-Renault 3 1 :padx 20 :pady :3)
	        (grid text-label-price 5 1 :padx 20 :pady :3)

	      
	    

	        (grid btn-Porche 0 0 :pady :10)
	        (grid btn-Mercedes 1 0 :pady :10)
	        (grid btn-Lada 2 0 :pady :10)
	        (grid btn-Renault 3 0 :pady :10)
	        (grid btn-price  5 0 :pady :10)

	       
	        (pack btn-sorted :fill :x)

	        (pack text-label-sorted :padx 150 :pady :30)
	        (pack btn-bounds :fill :x)
	            (pack text-field-low :fill :x)
	        (pack text-field-high :fill :x)
	          (pack text-label-bounds :padx 150 :pady :30)
	        (pack btn-uncook :fill :x)
	        ()
		)
	)
)

(gui)